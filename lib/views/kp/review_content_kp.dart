import 'package:auralearn/components/authenticated_app_layout.dart';
import 'package:auralearn/components/bottom_bar.dart';
import 'package:flutter/material.dart';

import 'package:cloud_firestore/cloud_firestore.dart';

class ReviewContentKPPage extends StatefulWidget {
  final String subjectId;
  const ReviewContentKPPage({super.key, required this.subjectId});

  @override
  State<ReviewContentKPPage> createState() => _ReviewContentKPPageState();
}

class _ReviewContentKPPageState extends State<ReviewContentKPPage> {
  Future<Map<String, dynamic>>? _contentFuture;

  @override
  void initState() {
    super.initState();
    _contentFuture = _loadTopicsAndContent();
  }

  Future<Map<String, dynamic>> _loadTopicsAndContent() async {
    final subjectDoc = await FirebaseFirestore.instance
        .collection('subjects')
        .doc(widget.subjectId)
        .get();

    if (!subjectDoc.exists) throw Exception('Subject not found');

    final topicsSnapshot =
        await subjectDoc.reference.collection('topics').orderBy('order').get();

    List<Map<String, dynamic>> topicsWithContent = [];

    for (final topicDoc in topicsSnapshot.docs) {
      final chunksSnapshot = await FirebaseFirestore.instance
          .collection('content_chunks')
          .where('topic_id', isEqualTo: topicDoc.id)
          .orderBy('order')
          .get();

      topicsWithContent.add({
        'topicId': topicDoc.id,
        'topic': topicDoc.data(),
        'chunks': chunksSnapshot.docs.map((d) => d.data()).toList(),
      });
    }

    return {
      'subject': subjectDoc.data(),
      'topicsWithContent': topicsWithContent
    };
  }

  @override
  Widget build(BuildContext context) {
    return AuthenticatedAppLayout(
      role: UserRole.kp,
      appBarTitle: 'Review Content',
      bottomNavIndex: 0,
      showBottomBar: false,
      showCloseButton: true,
      child: FutureBuilder<Map<String, dynamic>>(
        future: _contentFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          if (!snapshot.hasData) {
            return const Center(child: Text('No content found.'));
          }

          final data = snapshot.data!;
          final subject = data['subject'];
          final topicsWithContent =
              data['topicsWithContent'] as List<Map<String, dynamic>>;

          return ListView(
            padding: const EdgeInsets.all(16),
            children: [
              Text(
                subject['name'],
                style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.white),
              ),
              const SizedBox(height: 8),
              const Text(
                'Below is the content generated by AI for each topic. Please review for accuracy and completeness. The content is currently pending admin approval.',
                style: TextStyle(color: Colors.white70),
              ),
              const Divider(height: 32),
              if (topicsWithContent.isEmpty)
                _buildEmptyState()
              else
                ...topicsWithContent.map((item) => _buildTopicCard(item)),
            ],
          );
        },
      ),
    );
  }

  Widget _buildTopicCard(Map<String, dynamic> item) {
    final topic = item['topic'];
    final chunks = item['chunks'] as List<dynamic>;

    Color statusColor;
    String statusText =
        (topic['status'] as String).replaceAll('_', ' ').toUpperCase();
    switch (topic['status']) {
      case 'approved':
        statusColor = Colors.green;
        break;
      case 'rejected':
        statusColor = Colors.red;
        break;
      default:
        statusColor = Colors.orange;
    }

    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      child: ExpansionTile(
        title: Text(
          topic['title'],
          style: const TextStyle(
              fontWeight: FontWeight.bold, color: Colors.white),
        ),
        subtitle: Text(
          'Status: $statusText',
          style: TextStyle(color: statusColor, fontWeight: FontWeight.w500),
        ),
        children: [
          Padding(
            padding:
                const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: chunks.isEmpty
                  ? [
                      const Padding(
                        padding: EdgeInsets.symmetric(vertical: 16.0),
                        child:
                            Text('No content chunks found for this topic.'),
                      )
                    ]
                  : chunks.map((chunk) => _buildContentChunk(chunk)).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildContentChunk(Map<String, dynamic> chunk) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        // FIX: Replaced deprecated `withOpacity` with `withAlpha`.
        color: Colors.black.withAlpha((0.2 * 255).round()),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.white12, width: 0.5),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            chunk['title'],
            style: TextStyle(
                fontWeight: FontWeight.w600, color: Colors.blue[300]),
          ),
          const SizedBox(height: 8),
          Text(
            chunk['content'],
            style: const TextStyle(color: Colors.white70, height: 1.5),
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 48.0),
        child: Column(
          children: const [
            Icon(Icons.inbox_outlined, size: 64, color: Colors.white38),
            SizedBox(height: 16),
            Text(
              'No Content Generated Yet',
              style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.white),
            ),
            SizedBox(height: 8),
            Text(
              'Use the upload content feature to generate topics and learning materials.',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.white70),
            ),
          ],
        ),
      ),
    );
  }
}