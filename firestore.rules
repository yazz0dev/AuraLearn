rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for roles
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'SuperAdmin';
    }
    
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isPrivilegedAdmin() {
      return isSuperAdmin() || isAdmin();
    }
    
    function isKP() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'KP';
    }
    
    function isStudent() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Student';
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      allow get, list: if request.auth != null;

      // Create rules:
      // 1. Any user can create their own 'Student' account.
      // 2. A SuperAdmin can create an 'Admin' user.
      // 3. A privileged admin (Admin or SuperAdmin) can create a 'KP' user.
      allow create: if (request.auth.uid == userId && request.resource.data.role == 'Student') ||
                     (request.resource.data.role == 'Admin' && isSuperAdmin()) ||
                     (request.resource.data.role == 'KP' && isPrivilegedAdmin());

      // Update rules:
      // 1. A user can update their own document, but cannot change their role.
      // 2. A privileged admin can update any user document.
      allow update: if (request.auth.uid == userId && request.resource.data.role == resource.data.role) || isPrivilegedAdmin();
      
      // Delete rules:
      // 1. A SuperAdmin can delete any Admin or KP.
      // 2. An Admin can only delete KPs that they created.
      allow delete: if (isSuperAdmin() && (resource.data.role == 'Admin' || resource.data.role == 'KP')) ||
                     (isAdmin() && resource.data.role == 'KP' && resource.data.createdBy == request.auth.uid);
    }

    // Rules for the 'subjects' collection
    match /subjects/{subjectId} {
      allow read: if request.auth != null && (
        isStudent() || 
        isPrivilegedAdmin() || 
        (isKP() && resource.data.assignedKpId == request.auth.uid)
      );
      
      allow create, update, delete: if isPrivilegedAdmin();
      
      allow list: if request.auth != null;
      
      // Rules for topics subcollection
      match /topics/{topicId} {
        allow read, list: if request.auth != null && (
          isStudent() || 
          isPrivilegedAdmin() || 
          (isKP() && get(/databases/$(database)/documents/subjects/$(subjectId)).data.assignedKpId == request.auth.uid)
        );
        
        allow create, update: if request.auth != null && (
          isPrivilegedAdmin() || 
          (isKP() && get(/databases/$(database)/documents/subjects/$(subjectId)).data.assignedKpId == request.auth.uid)
        );
        
        allow delete: if isPrivilegedAdmin();
      }
      
      // Rules for other potential subcollections
      match /{document=**} {
        allow read, list: if request.auth != null && (
          isStudent() || 
          isPrivilegedAdmin() || 
          (isKP() && get(/databases/$(database)/documents/subjects/$(subjectId)).data.assignedKpId == request.auth.uid)
        );
        
        allow create, update: if request.auth != null && (
          isPrivilegedAdmin() || 
          (isKP() && get(/databases/$(database)/documents/subjects/$(subjectId)).data.assignedKpId == request.auth.uid)
        );
        
        allow delete: if isPrivilegedAdmin();
      }
    }
    
    // Rules for content_chunks collection
    match /content_chunks/{chunkId} {
      allow read, list: if request.auth != null;
      
      allow create: if request.auth != null && (
        isPrivilegedAdmin() || 
        (isKP() && get(/databases/$(database)/documents/subjects/$(request.resource.data.subject_id)).data.assignedKpId == request.auth.uid)
      );
      
      allow update: if request.auth != null && (
        isPrivilegedAdmin() || 
        (isKP() && get(/databases/$(database)/documents/subjects/$(resource.data.subject_id)).data.assignedKpId == request.auth.uid)
      );
      
      allow delete: if isPrivilegedAdmin();
    }

    // Collection group rules for cross-subject queries
    match /{path=**}/topics/{topicId} {
      allow read, list: if isPrivilegedAdmin();
    }
  }
}
